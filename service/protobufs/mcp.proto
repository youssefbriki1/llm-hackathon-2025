syntax = "proto3";
package remote;

service RemoteRunner {
  // Submit a job to a host; optionally attach small input files
  rpc SubmitJob(SubmitJobRequest) returns (SubmitJobResponse);
  // Get the latest status
  rpc GetStatus(GetStatusRequest) returns (GetStatusResponse);
  // Stream logs (stdout/err) incrementally
  rpc StreamLogs(StreamLogsRequest) returns (stream LogChunk);
  // Download result files (basic)
  rpc GetResult(GetResultRequest) returns (GetResultResponse);
  // Cancel a running job
  rpc CancelJob(CancelJobRequest) returns (CancelJobResponse);
}

message KV { string key = 1; string value = 2; }

message AttachedFile { string path = 1; bytes content = 2; }

message SubmitJobRequest {
  string host = 1;              // e.g., "localhost" or "login1.cluster"
  string workdir = 2;           // staging dir name; server can create it
  string command = 3;           // shell cmd OR path to script to run
  repeated string args = 4;
  repeated KV env = 5;          // environment variables
  repeated AttachedFile files = 6; // small inputs to write before run
  int32 timeout_seconds = 7;    // 0 = no timeout
}

message SubmitJobResponse { string job_id = 1; }

message GetStatusRequest { string job_id = 1; }
enum JobState { UNKNOWN = 0; QUEUED = 1; RUNNING = 2; SUCCEEDED = 3; FAILED = 4; CANCELLED = 5; }
message GetStatusResponse {
  string job_id = 1;
  JobState state = 2;
  int32 exit_code = 3;          
  string host = 4;
  string workdir = 5;
  string started_at = 6; 
  string finished_at = 7;
}

message StreamLogsRequest { string job_id = 1; bool follow = 2; }
message LogChunk { string stream = 1; string text = 2; } 

message GetResultRequest { string job_id = 1; string path = 2; }  
message GetResultResponse { string filename = 1; bytes content = 2; }

message CancelJobRequest { string job_id = 1; }
message CancelJobResponse { bool accepted = 1; }
